/*!
 * Copyright (c) Microsoft Corporation.
 * All rights reserved. See LICENSE in the project root for license information.
 */

import * as React from 'react';
import { ProductInput, getSimpleProductAction } from '../../actions/get-product.action';

import { IShowProductDetailsData } from './show-product-details.data';
import { IShowProductDetailsProps } from './show-product-details.props.autogenerated';
import { SimpleProduct } from '@msdyn365-commerce/retail-proxy';

export interface IShowProductDetailsViewProps extends IShowProductDetailsProps<IShowProductDetailsData> {
    simpleProduct: SimpleProduct | undefined;
    productId: number | undefined;
    getProductInfo: (productId: number) => void;
    handleNewProductId: (productId: number) => void;
}

export interface IShowProductDetailsState {
    simpleProduct: SimpleProduct | undefined;
    productId: number | undefined;
}
/**
 *
 * ShowProductDetails component
 * @extends {React.PureComponent<IShowProductDetailsProps<IShowProductDetailsData>>}
 */
class ShowProductDetails extends React.Component<IShowProductDetailsProps<IShowProductDetailsData>, IShowProductDetailsState> {
    constructor(props: IShowProductDetailsProps<IShowProductDetailsData>) {
        super(props);
        this.state = {
            simpleProduct: undefined,
            productId: this.props.config.productId
        };
    }

    public async componentDidMount(): Promise<void> {
        let productId: number = this.props.config.productId;
        if (productId === undefined || productId === null || productId === 0) {
            productId = 68719495953;
        }
        const { channel } = this.props.context.actionContext.requestContext;
        if (productId && channel && channel.RecordId) {
            const input: ProductInput = new ProductInput(productId, channel.RecordId, this.props.context.request);
            const product = await getSimpleProductAction(input, this.props.context.actionContext);
            this.setState({ simpleProduct: product, productId: productId });
        }
    }

    public handleNewProductId = (productId: number) => {
        console.log(`new product Id: $(productId) is set`);
        this.setState({
            productId
        });
    };

    public getProductInfo: (productId: number) => void = async (productId: number) => {
        if (productId !== 0 && productId !== undefined) {
            const { channel } = this.props.context.actionContext.requestContext;
            if (productId && channel && channel.RecordId) {
                const input: ProductInput = new ProductInput(productId, channel.RecordId, this.props.context.request);
                const product = await getSimpleProductAction(input, this.props.context.actionContext);
                console.log(product);
                this.setState({ simpleProduct: product, productId: productId });
            }
        }
    };

    public render(): JSX.Element | null {
        const { simpleProduct, productId } = this.state;
        console.log(`${simpleProduct} from state in render`);
        const showProductDetailsViewProps: IShowProductDetailsViewProps = {
            ...this.props,
            simpleProduct,
            productId,
            handleNewProductId: this.handleNewProductId,
            getProductInfo: this.getProductInfo
        };
        return this.props.renderView(showProductDetailsViewProps);
    }
}

export default ShowProductDetails;
