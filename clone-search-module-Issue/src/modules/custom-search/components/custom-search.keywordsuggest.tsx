/*!
 * Copyright (c) Microsoft Corporation.
 * All rights reserved. See LICENSE in the project root for license information.
 */

/* eslint-disable no-duplicate-imports */
import MsDyn365, { getRichTextHtml } from '@msdyn365-commerce/core';
import { SearchSuggestion } from '@msdyn365-commerce/retail-proxy';
import { getPayloadObject, getTelemetryAttributes, IPayLoad, ITelemetryContent } from '@msdyn365-commerce-modules/utilities';
import * as React from 'react';

import { ICustomSearchData } from '../custom-search.data';
import { ICustomSearchProps } from '../custom-search.props.autogenerated';

export interface ISearchKeywordSuggestProps {
    searchKeywordSuggestClass: string;
    searchPageURL: string;
    searchQsp: string | undefined;
    hitPrefix: string;
    hitSuffix: string;
    autoSuggestProps: ICustomSearchProps<ICustomSearchData>;
    searchText: string;
    suggestions: SearchSuggestion[] | undefined;
    telemetryContent?: ITelemetryContent;
}

export interface ISearchKeywordViewProps {
    text: React.ReactNode[];
}

let payLoad: IPayLoad;

/**
 * KeywordSuggestionsComponent.
 * @param props
 */
export const KeywordSuggestionsComponent = (props: ISearchKeywordSuggestProps): ISearchKeywordViewProps | undefined => {
    const { suggestions, hitPrefix, hitSuffix } = props;

    payLoad = getPayloadObject('click', props.telemetryContent!, '');

    const reactNodes: React.ReactNode[] = [];

    suggestions?.map(item => {
        reactNodes.push(_assembleNode(item, hitPrefix, hitSuffix, props));
    });

    return { text: reactNodes };
};

const _assembleNode = (item: SearchSuggestion, hitPrefix: string, hitSuffix: string, props: ISearchKeywordSuggestProps) => {
    const ariaLabel =
        item.Value && item.Value.replace(new RegExp(`[${hitPrefix}]`, 'gi'), '').replace(new RegExp(`[${hitSuffix}]`, 'gi'), '');
    payLoad.contentAction.etext = ariaLabel;
    const attribute = getTelemetryAttributes(props.telemetryContent!, payLoad);
    return (
        <li className='msc-autoSuggest__keywordResults-item' key={item.Id}>
            <a aria-label={ariaLabel} href={_generateLink(item, hitPrefix, hitSuffix, props)} {...attribute}>
                {_generateLink(item, hitPrefix, hitSuffix, props) &&
                    _getHighlightedText(item.Value ? item.Value : '', hitPrefix, hitSuffix)}
            </a>
        </li>
    );
};

const _generateLink = (suggestion: SearchSuggestion, hitPrefix: string, hitSuffix: string, props: ISearchKeywordSuggestProps): string => {
    const { searchPageURL, searchQsp } = props;

    const formattedLink = (suggestion.Value as string)
        .replace(new RegExp(`[${hitPrefix}]`, 'gi'), '')
        .replace(new RegExp(`[${hitSuffix}]`, 'gi'), '');

    if (!MsDyn365.isBrowser) {
        return '';
    }

    const queryUrl = new URL(searchPageURL, window.location.href);
    if (searchQsp && formattedLink) {
        queryUrl.searchParams.set(searchQsp, formattedLink);
    }

    return queryUrl.href;
};

const _getHighlightedText = (suggestion: string, hitPrefix: string, hitSuffix: string): JSX.Element => {
    const formattedText = suggestion
        .replace(new RegExp(`[${hitPrefix}]`, 'gi'), '<strong>')
        .replace(new RegExp(`[${hitSuffix}]`, 'gi'), '</strong>');

    // eslint-disable-next-line react/no-danger
    return <span dangerouslySetInnerHTML={getRichTextHtml(formattedText)} />;
};
