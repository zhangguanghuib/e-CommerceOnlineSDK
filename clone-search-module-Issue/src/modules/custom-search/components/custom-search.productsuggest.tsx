/*!
 * Copyright (c) Microsoft Corporation.
 * All rights reserved. See LICENSE in the project root for license information.
 */

/* eslint-disable no-duplicate-imports */
import { PriceComponent } from '@msdyn365-commerce/components';
import { getRichTextHtml, IActionContext, IImageSettings, Image, ITelemetry } from '@msdyn365-commerce/core';
import { SearchSuggestion } from '@msdyn365-commerce/retail-proxy';
import { getProductPageUrlSync, ObjectExtensions } from '@msdyn365-commerce-modules/retail-actions';
import {
    getPayloadObject,
    getTelemetryAttributes,
    INodeProps,
    IPayLoad,
    ITelemetryContent,
    NodeTag
} from '@msdyn365-commerce-modules/utilities';
import * as React from 'react';

import { ICustomSearchData } from '../custom-search.data';
import { ICustomSearchProps } from '../custom-search.props.autogenerated';

/**
 * Search product suggest resources.
 */
export interface ISearchProductSuggestResources {
    freePriceText: string;
}

export interface ISearchProductSuggestProps {
    searchProductSuggestClass: string;
    searchPageURL: string;
    searchQsp: string | undefined;
    hitPrefix: string;
    hitSuffix: string;
    autoSuggestProps: ICustomSearchProps<ICustomSearchData>;
    searchText: string;
    suggestions: SearchSuggestion[] | undefined;
    telemetry: ITelemetry;
    moduleType: string;
    moduleId: string;
    telemetryContent?: ITelemetryContent;
    resources?: ISearchProductSuggestResources;
}

export interface ISearchProductViewProps {
    title: React.ReactNode;
    items: ISearchProductItemViewProps[];
}

export interface ISearchProductItemViewProps {
    text: React.ReactNode;
    thumbnail: React.ReactNode;
    price: React.ReactNode;
    LiProduct: INodeProps;
    AProduct: INodeProps;
    id: string | undefined;
}

let payLoad: IPayLoad;
let telemetryContent: ITelemetryContent | undefined;

/**
 * ProductSuggestionsComponent.
 * @param props
 */
export const ProductSuggestionsComponent = (props: ISearchProductSuggestProps): ISearchProductViewProps | undefined => {
    const {
        suggestions,
        hitSuffix,
        hitPrefix,
        autoSuggestProps: {
            context: { actionContext },
            resources: { productSuggestionHeading }
        },
        moduleType,
        moduleId
    } = props;
    const reactNodes: ISearchProductItemViewProps[] = [];
    telemetryContent = props.telemetryContent;
    payLoad = getPayloadObject('click', props.telemetryContent!, '');

    suggestions?.map(item => {
        reactNodes.push(_assembleNode(item, hitPrefix, hitSuffix, actionContext, props, moduleType, moduleId));
    });

    const titleNode = _renderTitle(productSuggestionHeading);

    return { title: titleNode, items: reactNodes };
};

const _renderTitle = (productSuggestionHeading: string) => {
    const productAutoSuggestionHeading = productSuggestionHeading ? productSuggestionHeading : 'Go to products';

    return <li className='msc-autoSuggest__productResults-title'>{productAutoSuggestionHeading}</li>;
};

const _assembleNode = (
    item: SearchSuggestion,
    hitPrefix: string,
    hitSuffix: string,
    actionContext: IActionContext,
    props: ISearchProductSuggestProps,
    moduleType: string,
    moduleId: string
): ISearchProductItemViewProps => {
    const altText =
        item.Value && item.Value.replace(new RegExp(`[${hitPrefix}]`, 'gi'), '').replace(new RegExp(`[${hitSuffix}]`, 'gi'), '');

    const price = item.Value3?.Value?.DecimalValue;
    return {
        text: _getHighlightedText(item.Value ? item.Value : '', hitPrefix, hitSuffix),
        thumbnail: _renderThumbnail(item, altText ? altText : '', props),
        price: !ObjectExtensions.isNullOrUndefined(price) && _renderPrice(price, price, moduleId, moduleType, props),
        LiProduct: _getLiWrapper(),
        AProduct: _getAWrapper(item, hitPrefix, hitSuffix, actionContext, props),
        id: item.Id
    };
};

const _getLiWrapper = () => {
    return {
        className: 'msc-autoSuggest__productResults-item',
        tag: 'li' as NodeTag
    };
};

const _getAWrapper = (
    item: SearchSuggestion,
    hitPrefix: string,
    hitSuffix: string,
    actionContext: IActionContext,
    props: ISearchProductSuggestProps
) => {
    const {
        autoSuggestProps: { context }
    } = props;
    const ariaLabel =
        item.Value && item.Value.replace(new RegExp(`[${hitPrefix}]`, 'gi'), '').replace(new RegExp(`[${hitSuffix}]`, 'gi'), '');

    payLoad.contentAction.recid = item.Id;
    const attribute = getTelemetryAttributes(telemetryContent!, payLoad);
    const productPrice = context.cultureFormatter.formatCurrency(item.Value3!.Value!.DecimalValue!);

    return {
        className: 'msc-autoSuggest__productResults-item',
        tag: 'a' as NodeTag,
        'aria-label': `${ariaLabel!} ${productPrice}`,
        href: _generateLink(item, hitPrefix, hitSuffix, actionContext),
        ...attribute
    };
};

const _generateLink = (suggestion: SearchSuggestion, hitPrefix: string, hitSuffix: string, actionContext: IActionContext) => {
    const formattedLink = (suggestion.Value as string)
        .replace(new RegExp(`[${hitPrefix}]`, 'gi'), '')
        .replace(new RegExp(`[${hitSuffix}]`, 'gi'), '');
    return suggestion.Value && suggestion.Id
        ? getProductPageUrlSync(formattedLink, (suggestion.Id as unknown) as number, actionContext, undefined)
        : '';
};

const _getHighlightedText = (suggestion: string, hitPrefix: string, hitSuffix: string): JSX.Element => {
    const formattedText = suggestion
        .replace(new RegExp(`[${hitPrefix}]`, 'gi'), '<strong>')
        .replace(new RegExp(`[${hitSuffix}]`, 'gi'), '</strong>');

    return (
        // eslint-disable-next-line react/no-danger
        <span className='msc-price msc-autoSuggest__productResults-item-text' dangerouslySetInnerHTML={getRichTextHtml(formattedText)} />
    );
};

const _renderPrice = (
    adjustedPrice: number,
    basePrice: number,
    moduleId: string,
    moduleType: string,
    props: ISearchProductSuggestProps
): JSX.Element | null => {
    const {
        autoSuggestProps: { context }
    } = props;

    return (
        <PriceComponent
            id={moduleId}
            typeName={moduleType}
            context={context}
            data={{
                price: {
                    CustomerContextualPrice: adjustedPrice,
                    BasePrice: basePrice
                }
            }}
            className='msc-autoSuggest__productResults-item-price'
            freePriceText={props.resources?.freePriceText}
        />
    );
};

const _renderThumbnail = (suggestion: SearchSuggestion, altText: string, props: ISearchProductSuggestProps): JSX.Element | null => {
    const {
        autoSuggestProps: {
            context: {
                request: { gridSettings }
            },
            config: { imageSettings }
        }
    } = props;
    if (imageSettings) {
        imageSettings.cropFocalRegion = true;
    }

    if (!suggestion || !suggestion.ImageUrl) {
        props.telemetry.error('Search suggestion content is empty, module wont render.');
        return null;
    }

    const defaultImageSettings: IImageSettings = {
        viewports: {
            xs: { q: 'w=40&h=40&m=6', w: 0, h: 0 },
            lg: { q: 'w=40&h=40&m=6', w: 0, h: 0 },
            xl: { q: 'w=40&h=40&m=6', w: 0, h: 0 }
        },
        lazyload: true,
        cropFocalRegion: true
    };

    return (
        <Image
            requestContext={props.autoSuggestProps.context.actionContext.requestContext}
            altText={altText}
            className='msc-autoSuggest__productResults-item-img'
            src={suggestion.ImageUrl}
            gridSettings={gridSettings!}
            imageSettings={imageSettings ? imageSettings : defaultImageSettings}
            loadFailureBehavior='empty'
        />
    );
};
