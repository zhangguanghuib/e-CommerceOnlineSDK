/* eslint-disable @typescript-eslint/no-floating-promises */
/*!
 * Copyright (c) Microsoft Corporation.
 * All rights reserved. See LICENSE in the project root for license information.
 */

import * as React from 'react';
import { IShowProductavailsWhenPageloadData } from './show-productavails-when-pageload.data';
import { IShowProductavailsWhenPageloadProps } from './show-productavails-when-pageload.props.autogenerated';
import { SimpleProduct, AsyncResult, OrgUnitAvailability } from '@msdyn365-commerce/retail-proxy';
import { GetProductAvailabilityActionInput, getProductAvailabilityAction } from '../../actions/get-product-availability-action.action';
import { ProductInput, getSimpleProductAction } from '../../actions/get-product.action';
export interface IShowProductavailsWhenPageloadViewProps extends IShowProductavailsWhenPageloadProps<IShowProductavailsWhenPageloadData> {
    state: IShowProductavailsWhenPageloadState;
}

export interface IShowProductavailsWhenPageloadState {
    simpleProduct: SimpleProduct | undefined;
    productAvailabilityData: OrgUnitAvailability[] | undefined;
}

class ShowProductavailsWhenPageload extends React.Component<
    IShowProductavailsWhenPageloadProps<IShowProductavailsWhenPageloadData>,
    IShowProductavailsWhenPageloadState
> {
    constructor(props: IShowProductavailsWhenPageloadProps<IShowProductavailsWhenPageloadData>) {
        super(props);
        this.state = {
            simpleProduct: undefined,
            productAvailabilityData: []
        };
    }

    public async componentDidMount(): Promise<void> {
        await this.refreshData();
    }

    public async refreshData(): Promise<void> {
        const { config, data } = this.props;
        let simpleProduct: SimpleProduct | undefined = data.simpleProduct.result;
        let productId: number = 0;
        const channelId: number = this.props.context.actionContext.requestContext.apiSettings.channelId;

        if (simpleProduct !== undefined) {
            productId = simpleProduct.RecordId;
        } else if (config && config.productId) {
            productId = config.productId;
            const input: ProductInput = new ProductInput(productId, channelId, this.props.context.request);
            simpleProduct = await getSimpleProductAction(input, this.props.context.actionContext);
        }

        const productAvailabilityInput = new GetProductAvailabilityActionInput(
            productId,
            this.props.context.actionContext.requestContext.apiSettings.channelId
        );
        const productAvailabilityData: OrgUnitAvailability[] | undefined = await getProductAvailabilityAction(
            productAvailabilityInput,
            this.props.context.actionContext
        );
        this.setState({ simpleProduct, productAvailabilityData });
    }

    public render(): JSX.Element | null {
        const data = this.props.data;
        const simpleProductAsync: AsyncResult<SimpleProduct> = data.simpleProduct;
        if (simpleProductAsync.status === 'LOADING') {
            return this._renderLoading();
        }

        if (!data || data.simpleProduct.status === 'FAILED') {
            return this._renderError();
        }

        const viewProps = {
            ...this.props,
            state: this.state
        };
        return this.props.renderView(viewProps);
    }

    private _renderLoading(): JSX.Element {
        return (
            <div className='spinner-border text-primary' role='status'>
                <span className='sr-only'>Loading...</span>
            </div>
        );
    }

    private _renderError(): JSX.Element {
        return (
            <div className='card'>
                <div className='card-header'>Error!</div>
            </div>
        );
    }
}

export default ShowProductavailsWhenPageload;
