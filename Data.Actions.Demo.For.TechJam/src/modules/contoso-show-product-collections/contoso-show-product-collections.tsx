/*!
 * Copyright (c) Microsoft Corporation.
 * All rights reserved. See LICENSE in the project root for license information.
 */

import * as React from 'react';
import { IActionContext, ICommerceApiSettings } from '@msdyn365-commerce/core';
import { IContosoShowProductCollectionsData } from './contoso-show-product-collections.data';
import { IContosoShowProductCollectionsProps } from './contoso-show-product-collections.props.autogenerated';
import { ContosoProductInput, getContosoSimpleProductsAction } from '../../actions/contoso-get-simple-products.action';
import { SimpleProduct } from '@msdyn365-commerce/retail-proxy';

export interface IContosoShowProductCollectionsViewProps extends IContosoShowProductCollectionsProps<IContosoShowProductCollectionsData> {
    productCollections: SimpleProduct[];
}

export interface IContosoShowProductCollectionsState {
    productCollections: SimpleProduct[];
}

class ContosoShowProductCollections extends React.PureComponent<
    IContosoShowProductCollectionsProps<IContosoShowProductCollectionsData>,
    IContosoShowProductCollectionsState
> {
    constructor(props: IContosoShowProductCollectionsProps<IContosoShowProductCollectionsData>) {
        super(props);
        this.state = {
            productCollections: []
        };
    }

    public async componentDidMount(): Promise<void> {
        const { config, context } = this.props;
        const ctx: IActionContext = context.actionContext;
        const channelId: number = context.actionContext.requestContext.apiSettings.channelId;
        const apiSettings: ICommerceApiSettings = context.actionContext.requestContext.apiSettings;
        if (config && config.productIds) {
            const productIds: string[] = config.productIds.split(',');
            const contosoProductInputs: ContosoProductInput[] = productIds.map((productId: string) => {
                return new ContosoProductInput(productId, apiSettings, channelId, undefined, ctx.requestContext);
            });
            let productCollections: SimpleProduct[] = await getContosoSimpleProductsAction(contosoProductInputs, ctx);
            productCollections = productCollections.map((product: SimpleProduct) => {
                return product;
            });
            this.setState({
                productCollections: productCollections
            });
        }
    }
    public render(): JSX.Element | null {
        const showProductCollectionsViewProps: IContosoShowProductCollectionsViewProps = {
            ...this.props,
            productCollections: this.state.productCollections
        };
        return this.props.renderView(showProductCollectionsViewProps);
    }
}

export default ContosoShowProductCollections;
