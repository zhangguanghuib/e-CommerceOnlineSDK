import * as React from 'react';
// import { OrgUnitAvailability } from '@msdyn365-commerce/retail-proxy';
// import { SimpleProduct } from '@msdyn365-commerce/retail-proxy/dist/Entities/CommerceTypes.g';
import {
    GetSimpleProductWithAvailabilityInput,
    IGetSimpleproductWithAvailabilityData,
    getSimpleProductWithAvailabilityAction
} from '../../actions/get-simpleproduct-with-availability.action';

import { IShowSimpleproductWithAvailabilitiesData } from './show-simpleproduct-with-availabilities.data';
import { IShowSimpleproductWithAvailabilitiesProps } from './show-simpleproduct-with-availabilities.props.autogenerated';

export interface IShowSimpleproductWithAvailabilitiesViewProps
    extends IShowSimpleproductWithAvailabilitiesProps<IShowSimpleproductWithAvailabilitiesData> {
    productId: number | undefined;
    getSimpleproductWithAvailabilityData: IGetSimpleproductWithAvailabilityData | undefined;
    getProductInfo: (productId: number) => void;
    handleNewProductId: (productId: number) => void;
}

export interface IShowSimpleProductProductAvailabilitiesState {
    productId: number | undefined;
    getSimpleproductWithAvailabilityData: IGetSimpleproductWithAvailabilityData | undefined;
}

class ShowSimpleproductWithAvailabilities extends React.PureComponent<
    IShowSimpleproductWithAvailabilitiesProps<IShowSimpleproductWithAvailabilitiesData>,
    IShowSimpleProductProductAvailabilitiesState
> {
    constructor(props: IShowSimpleproductWithAvailabilitiesProps<IShowSimpleproductWithAvailabilitiesData>) {
        super(props);
        this.state = {
            productId: undefined,
            getSimpleproductWithAvailabilityData: undefined
        };
    }
    public async componentDidMount(): Promise<void> {
        let productId: number = this.props.config.productId;
        if (productId === undefined || productId === null || productId === 0) {
            productId = 68719495953;
        }
        const { channel } = this.props.context.actionContext.requestContext;
        if (productId && channel && channel.RecordId) {
            const input: GetSimpleProductWithAvailabilityInput = new GetSimpleProductWithAvailabilityInput(
                productId,
                channel.RecordId,
                this.props.context.request
            );
            const getSimpleproductWithAvailabilityData: IGetSimpleproductWithAvailabilityData = await getSimpleProductWithAvailabilityAction(
                input,
                this.props.context.actionContext
            );
            this.setState({ getSimpleproductWithAvailabilityData, productId });
        }
    }

    public handleNewProductId = (productId: number) => {
        console.log(`new product Id: $(productId) is set`);
        this.setState({
            productId
        });
    };

    public getProductInfo: (productId: number) => void = async (productId: number) => {
        if (productId !== 0 && productId !== undefined) {
            const { channel } = this.props.context.actionContext.requestContext;
            if (productId && channel && channel.RecordId) {
                const input: GetSimpleProductWithAvailabilityInput = new GetSimpleProductWithAvailabilityInput(
                    productId,
                    channel.RecordId,
                    this.props.context.request
                );
                const getSimpleproductWithAvailabilityData: IGetSimpleproductWithAvailabilityData = await getSimpleProductWithAvailabilityAction(
                    input,
                    this.props.context.actionContext
                );
                this.setState({ getSimpleproductWithAvailabilityData, productId });
            }
        }
    };
    public render(): JSX.Element | null {
        const { getSimpleproductWithAvailabilityData } = this.state;
        const showSimpleproductWithAvailabilitiesViewProps: IShowSimpleproductWithAvailabilitiesViewProps = {
            ...this.props,
            productId: this.state.productId,
            getSimpleproductWithAvailabilityData,
            getProductInfo: this.getProductInfo,
            handleNewProductId: this.handleNewProductId
        };
        return this.props.renderView(showSimpleproductWithAvailabilitiesViewProps);
    }
}

export default ShowSimpleproductWithAvailabilities;
