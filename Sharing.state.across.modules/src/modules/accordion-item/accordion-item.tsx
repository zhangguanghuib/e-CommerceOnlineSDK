import * as Msdyn365 from '@msdyn365-commerce/core';
import { ControlledDrawer, getTelemetryObject, IModuleProps, INodeProps, ITelemetryContent } from '@msdyn365-commerce-modules/utilities';
import { IDrawerState } from '@msdyn365-commerce-modules/utilities/dist/types/drawer/Drawer';
import classnames from 'classnames';
import { observer } from 'mobx-react';
import * as React from 'react';

import { createAccordionStateInput } from '../../actions/accordion-state.action';
import { IAccordionItemData } from './accordion-item.data';
import { IAccordionItemProps } from './accordion-item.props.autogenerated';

export interface IAccordionItemViewProps extends IAccordionItemProps<IAccordionItemData> {
    AccordionItemContainer: IModuleProps;
    drawer: INodeProps;
    accordionSlots: INodeProps;
    AccordionItemContent: INodeProps;
    className: string;
}

@observer
class AccordionItem extends React.Component<IAccordionItemProps<IAccordionItemData>> {
    private readonly moduleClassName: string = 'ms-accordion-item';
    private readonly telemetryContent?: ITelemetryContent;

    constructor(props: IAccordionItemProps<IAccordionItemData>) {
        super(props);
        this._onToggle = this._onToggle.bind(this);
        this.telemetryContent = getTelemetryObject(
            this.props.context.request.telemetryPageName!,
            this.props.friendlyName,
            this.props.telemetry
        );
    }

    public shouldComponentUpdate(nextProps: IAccordionItemProps<IAccordionItemData>): boolean {
        if (this.props.data === nextProps.data) {
            return false;
        }
        return true;
    }
    public render(): JSX.Element | null {
        console.log('AccordionItem render-Custom-GHZ');
        const { slots, renderView, config, data } = this.props;
        const accordionExpandedStateResult = data && data.accordionExpandedState && data.accordionExpandedState.result;
        const expanded =
            accordionExpandedStateResult && accordionExpandedStateResult.isAllExpanded === undefined
                ? data && config.isExpandedOnInitialLoad
                : accordionExpandedStateResult && accordionExpandedStateResult.isAllExpanded;
        const viewProps = {
            ...this.props,
            AccordionItemContainer: {
                moduleProps: this.props,
                className: classnames(this.moduleClassName)
            },
            AccordionItemContent: {
                className: 'ms-accordion-item-content'
            },
            drawer: {
                tag: ControlledDrawer,
                className: `${this.moduleClassName}__drawer`,
                toggleButtonText: (config.accordionItemTitle && config.accordionItemTitle) || '',
                collapseProps: { isOpen: expanded },
                onToggle: this._onToggle,
                onTextChange: this.handleHeadingChange,
                requestContext: this.props.context.request,
                telemetryContent: this.telemetryContent
            },
            accordionSlots: slots
        };
        return renderView(viewProps) as React.ReactElement;
    }

    public handleHeadingChange = (e: Msdyn365.ContentEditableEvent) => (this.props.config.accordionItemTitle = e.target.value);

    private _onToggle(state: IDrawerState): void {
        const accordionState = { isAllExpanded: false };
        this.props.context.actionContext.update(createAccordionStateInput(accordionState), accordionState);
    }
}

export default AccordionItem;
