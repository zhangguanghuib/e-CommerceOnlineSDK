import * as React from 'react';

import {
    getPayloadObject,
    getTelemetryAttributes,
    getTelemetryObject,
    IModuleProps,
    INodeProps,
    IPayLoad,
    ITelemetryContent,
    NodeTag,
    TelemetryConstant
} from '@msdyn365-commerce-modules/utilities';

import classnames from 'classnames';
import { observer } from 'mobx-react';

import { createAccordionStateInput } from '../../actions/accordion-state.action';

import { IAccordionv1Data } from './accordionv1.data';
import { IAccordionv1Props } from './accordionv1.props.autogenerated';

export interface ICallToActionProps {
    link: INodeProps[];
}

export interface IAccordianv1State {
    isDisabled: boolean;
}

export interface IAccordionv1ViewProps extends IAccordionv1Props<IAccordionv1Data> {
    AccordionContainer: IModuleProps;
    HeaderSection: INodeProps;
    accordionButtonsContainer: INodeProps;
    accordionButtons: React.ReactNode;
    accordionItemContainer: INodeProps;
    accordionItems: React.ReactNode;
}

@observer
class Accordionv1 extends React.PureComponent<IAccordionv1Props<IAccordionv1Data>, IAccordianv1State> {
    private readonly telemetryContent?: ITelemetryContent;
    private readonly payload: IPayLoad;
    private readonly expandAllButtonRef: React.RefObject<HTMLButtonElement> = React.createRef<HTMLButtonElement>();
    private readonly collapseAllButtonRef: React.RefObject<HTMLButtonElement> = React.createRef<HTMLButtonElement>();

    constructor(props: IAccordionv1Props<IAccordionv1Data>) {
        super(props);
        this._onExpandAll = this._onExpandAll.bind(this);
        this._onCollapseAll = this._onCollapseAll.bind(this);
        this.telemetryContent = getTelemetryObject(
            this.props.context.request.telemetryPageName!,
            this.props.friendlyName,
            this.props.telemetry
        );
        this.payload = getPayloadObject('click', this.telemetryContent, '');
        this.state = {
            isDisabled: false
        };
    }

    private _onExpandAll(): void {
        const accordionState = { isAllExpanded: true };
        this.props.context.actionContext.update(createAccordionStateInput(accordionState), accordionState);
        if (accordionState.isAllExpanded) {
            this.setState({
                isDisabled: true
            });
            setTimeout(() => {
                this.collapseAllButtonRef.current?.focus();
            }, 50);
        }
    }

    private _onCollapseAll(): void {
        const accordionState = { isAllExpanded: false };
        this.props.context.actionContext.update(createAccordionStateInput(accordionState), accordionState);
        if (!accordionState.isAllExpanded) {
            this.setState({
                isDisabled: false
            });
            setTimeout(() => {
                this.expandAllButtonRef.current?.focus();
            }, 50);
        }
    }

    private _getAccordionItem(item: React.ReactNode, index: number): React.ReactNode {
        return <React.Fragment key={index}>{React.cloneElement(item as React.ReactElement)}</React.Fragment>;
    }

    private _reenderAccordionButton(): React.ReactNode | null {
        this.payload.contentAction.etext = TelemetryConstant.ExpandAll;
        const attributeExpandAll = getTelemetryAttributes(this.telemetryContent!, this.payload);
        this.payload.contentAction.etext = TelemetryConstant.CollapseAll;
        const attributeCollapseAll = getTelemetryAttributes(this.telemetryContent!, this.payload);
        return (
            <>
                <button
                    disabled={this.state.isDisabled}
                    className='ms-accordion_ExpandAll'
                    aria-label='Open all'
                    onClick={this._onExpandAll}
                    ref={this.expandAllButtonRef}
                    {...attributeExpandAll}
                >
                    Open all
                </button>
                &nbsp; | &nbsp;
                <button
                    className='ms-accordion_CollapseAll'
                    aria-label='Close all'
                    onClick={this._onCollapseAll}
                    ref={this.collapseAllButtonRef}
                    {...attributeCollapseAll}
                    disabled={!this.state.isDisabled}
                >
                    Close all
                </button>
            </>
        );
    }

    public render(): JSX.Element | null {
        const { slots } = this.props;
        const accordionViewProps = {
            ...this.props,
            AccordionContainer: {
                moduleProps: this.props,
                className: classnames('ms-accordion')
            },
            HeaderSection: {
                className: classnames('ms-accordion-header-section')
            },
            accordionButtonsContainer: {
                className: 'ms-accordion-header-section-toggle-button-container'
            },
            accordionButtons: this._reenderAccordionButton(),
            accordionItemContainer: {
                tag: 'div' as NodeTag,
                className: 'ms-accordion-item-section'
            },
            accordionItems:
                slots &&
                slots.accordionItems &&
                slots.accordionItems.length > 0 &&
                slots.accordionItems.map((item: React.ReactNode, index: number) => this._getAccordionItem(item, index))
        };
        return this.props.renderView(accordionViewProps) as React.ReactElement;
    }
}

export default Accordionv1;
