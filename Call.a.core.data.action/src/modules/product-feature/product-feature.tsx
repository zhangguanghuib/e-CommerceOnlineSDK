/*!
 * Copyright (c) Microsoft Corporation.
 * All rights reserved. See LICENSE in the project root for license information.
 */

import * as React from 'react';

import { IProductFeatureData } from './product-feature.data';
import { imageAlignment, IProductFeatureProps } from './product-feature.props.autogenerated';

export interface IProductFeatureViewProps extends IProductFeatureProps<IProductFeatureData> {
    productName: string;
    productInfo: string;
    productImageUrl: string;
    productPrice: string;
    buttonInfo: string;
    alignment: imageAlignment;
}

/**
 *
 * ProductFeature component
 * @extends {React.PureComponent<IProductFeatureProps<IProductFeatureData>>}
 */
class ProductFeature extends React.PureComponent<IProductFeatureProps<IProductFeatureData>> {
    public render(): JSX.Element | null {
        const {
            config,
            data: { products }
        } = this.props;

        // set default product info values
        let ProductName = config.productTitle ? config.productTitle : 'No product name defined';
        let ProductInfo = config.productDetails ? config.productDetails.toString() : 'No product details defined';
        let ProductImageUrl = config.productImage ? config.productImage.src : '';
        const ButtonInfo = config.buttonText ? config.buttonText : 'No button text defined';
        let ProductPrice = '$129';

        // if product details were returned from Retail server, then we'll use that info instead of config values
        if (products && products.length) {
            ProductName = products[0].result && products[0].result.Name ? products[0].result.Name : 'Invalid product data';
            ProductInfo = products[0].result && products[0].result.Description ? products[0].result.Description : 'Invalid product data';
            ProductImageUrl = products[0].result && products[0].result.PrimaryImageUrl ? products[0].result.PrimaryImageUrl : '';
            ProductPrice = products[0].result && products[0].result.Price ? `$ ${products[0].result.Price}` : '';
        }

        const ProductFeatureViewProps = {
            ...this.props,
            productName: ProductName,
            productInfo: ProductInfo,
            productImageUrl: ProductImageUrl,
            productPrice: ProductPrice,
            buttonInfo: ButtonInfo,
            alignment: config.imageAlignment
        };

        return this.props.renderView(ProductFeatureViewProps);
    }
}

export default ProductFeature;
