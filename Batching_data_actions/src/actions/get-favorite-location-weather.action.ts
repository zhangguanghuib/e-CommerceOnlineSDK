/*!
 * Copyright (c) Microsoft Corporation.
 * All rights reserved. See LICENSE in the project root for license information.
 */

import * as Msdyn365 from '@msdyn365-commerce/core';

import { ISampleCurrentConditionsConfig } from '../modules/sample-current-conditions/sample-current-conditions.props.autogenerated';

import getFavorities, { GetLocationsInput } from './get-locations.action';

import getCurrentWeatureConditions, { IWeatherConditions, OpenWeatherApiInput } from './get-current-weather-conditions.action';

export class GetFavoriteLocationWeatherInput implements Msdyn365.IActionInput {
    public readonly apiKey: string;
    public readonly units?: string;
    public readonly language?: string;

    public constructor(apiKey: string, language?: string, units?: string) {
        this.apiKey = apiKey;
        this.units = units;
        this.language = language;
    }

    public getCacheKey = () => `Default`;
    public getCacheObjectType = () => 'FAVORITE-LOCATION-WEATHER';
    public dataCacheType = (): Msdyn365.CacheType => 'none';
}

const createFavoriteLocationWeatherInput = (args: Msdyn365.ICreateActionContext<ISampleCurrentConditionsConfig>): Msdyn365.IActionInput => {
    return new GetFavoriteLocationWeatherInput((args.config && args.config.apiKey) || '', args.requestContext.locale);
};

async function action(input: GetFavoriteLocationWeatherInput, ctx: Msdyn365.IActionContext): Promise<IWeatherConditions[]> {
    const favorites = await getFavorities(new GetLocationsInput(), ctx);
    if (favorites && favorites.length > 0) {
        const weatherApiInput = favorites.map(favorite => new OpenWeatherApiInput(input.apiKey, favorite, input.language, input.units));
        return getCurrentWeatureConditions(weatherApiInput, ctx);
    }
    return [];
}

export default Msdyn365.createObservableDataAction({
    id: 'get-favorite-location-weather',
    action: <Msdyn365.IAction<IWeatherConditions[]>>action,
    input: createFavoriteLocationWeatherInput
});
