/*!
 * Copyright (c) Microsoft Corporation.
 * All rights reserved. See LICENSE in the project root for license information.
 */

import * as MsDyn365 from '@msdyn365-commerce/core';
import * as React from 'react';
import { comparer, reaction } from 'mobx';
import { observer } from 'mobx-react';
import getCurrentWeatherConditions, { IWeatherConditions, OpenWeatherApiInput } from '../../actions/get-current-weather-conditions.action';
import { ISampleCurrentConditionsData } from './sample-current-conditions.data';
import { ISampleCurrentConditionsProps } from './sample-current-conditions.props.autogenerated';

interface IState {
    units: string;
    updated: Date;
    client: boolean;
}

export interface ISampleCurrentConditionsViewProps extends ISampleCurrentConditionsProps<ISampleCurrentConditionsData> {
    state: any;
    formatter: MsDyn365.ICultureInfoFormatter;
    onClick: () => Promise<void>;
    _renderForecast: (data: IWeatherConditions, index: number) => JSX.Element;
}
/**
 *
 * SampleCurrentConditions component
 * @extends {React.PureComponent<ISampleCurrentConditionsProps<ISampleCurrentConditionsData>>}
 */
@observer
class SampleCurrentConditions extends React.Component<ISampleCurrentConditionsProps<ISampleCurrentConditionsData>, IState> {
    private readonly formatter: MsDyn365.ICultureInfoFormatter;

    constructor(props: ISampleCurrentConditionsProps<ISampleCurrentConditionsData>) {
        super(props);
        this.state = {
            units: 'F',
            updated: new Date(),
            client: false
        };
        this.toggleUnit.bind(this);
        this._renderForecast.bind(this);
        this.formatter = (this.props.context && this.props.context.cultureFormatter) || new MsDyn365.CultureInfoFormatter('en-us', 'USD');
    }

    private async _refreshData(): Promise<void> {
        const { config, context, data } = this.props;
        if (config && config.apiKey && context && data.favorite_locations.result) {
            const apiKey = config.apiKey;

            const inputs = data.favorite_locations.result.map(location => {
                return new OpenWeatherApiInput(apiKey, location, context.request.locale, this.state.units);
            });

            void getCurrentWeatherConditions(inputs, context.actionContext).then(foo => {
                this.props.data.forecast.result = foo;
            });

            this.setState({});
        } else {
            console.log('Reaction triggered, but no result available.');
        }
    }

    private _renderError(): JSX.Element {
        return (
            <div className='card'>
                <div className='card-header'></div>
            </div>
        );
    }

    private _renderLoading(): JSX.Element {
        return (
            <div className='spinner-border text-primary' role='status'>
                <span className='sr-only'></span>
            </div>
        );
    }

    private toggleUnit = async () => {
        this.setState({ units: this.state.units === 'F' ? 'C' : 'F' }, async () => {
            await this._refreshData();
        });
    };

    private _renderForecast(data: IWeatherConditions, index: number): JSX.Element {
        if (!data || !data.weather || !data.weather.length) {
            return (
                <div className='col-lg-3, col-md-6 col-sm-8' key={`cc-${index}`}>
                    No data available
                </div>
            );
        }

        const icon = data.weather[0].icon;
        const caption = data.weather[0].main;
        const date = new Date(data.dt * 1000);
        return (
            <div className='col-lg-3, col-md-6 col-sm-8' key={`cc-${index}`}>
                <div className='card mb-3 mx-5 mx-sm-0'>
                    <div className='card-header'>{data.name}</div>
                    <div className='text-center'>
                        <img
                            src={`//openweathermap.org/themes/openweathermap/assets/vendor/owm/img/widgets/${icon}.png?w=75&m=6`}
                            alt={caption}
                            width='50'
                        />
                        <h4 className='card-title'>{caption}</h4>
                        <h5 className='card-text'>{`${data.main.temp} ${this.state.units}`}</h5>
                        <div className='font-size-small'>
                            <p>{this.formatter.formatDate(date, { weekday: 'short', month: 'short', day: '2-digit' })}</p>
                            &nbsp;
                            {this.formatter.formatDate(date, { hour: 'numeric', minute: 'numeric', second: 'numeric' })}
                        </div>
                    </div>
                </div>
            </div>
        );
    }

    public render(): JSX.Element | null {
        const data = this.props.data;

        if (data.forecast.status === 'LOADING' || !this.state.client) {
            return this._renderLoading();
        }

        if (!data || data.forecast.error || data.favorite_locations.error) {
            return this._renderError();
        }

        const viewProps: ISampleCurrentConditionsViewProps = {
            ...this.props,
            onClick: this.toggleUnit.bind(this),
            _renderForecast: this._renderForecast.bind(this),
            formatter: this.formatter,
            state: this.state
        };

        return this.props.renderView(viewProps);
    }

    public async componentDidMount(): Promise<void> {
        reaction(
            () => this.props.data.favorite_locations.result && this.props.data.favorite_locations.result.map(f => f.id),
            () => {
                console.log('Detected a change');
                return this._refreshData();
            },
            {
                equals: comparer.structural
            }
        );
        this.setState({ client: true });
    }
}

export default SampleCurrentConditions;
